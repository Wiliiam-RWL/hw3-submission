AWSTemplateFormatVersion: 2010-09-09
Description: This is the CloudFormation template for HW3 smart photobooth

Resources:
  S3BucketImages:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "image-bucket-hw2-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
      NotificationConfiguration:
        LambdaConfigurations: 
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LF1S3ElasticSearch.Arn
    
  BucketPolicyImage:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketImages # Required
      PolicyDocument: 
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${S3BucketImages}/*'

    
  S3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction # Required
      FunctionName: !GetAtt LF1S3ElasticSearch.Arn # Required
      Principal: s3.amazonaws.com # Required
      SourceArn: !Sub "arn:aws:s3:::image-bucket-hw2-${AWS::AccountId}"


  S3BucketWeb:
    Type: AWS::S3::Bucket
    Properties: 
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      WebsiteConfiguration: 
        IndexDocument: index.html
        ErrorDocument: error.html

  BucketPolicyWeb:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketWeb
      PolicyDocument: 
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${S3BucketWeb}/*'

  LF1S3ElasticSearch:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          def handler(event, context):
            print('Hello Lambda!')
        
      Description: "This is the LF1 of HW3. This function updates the images in B2 onto ElasticSearch"
      Role: !GetAtt IamRoleLF1.Arn
      Runtime: python3.12
      Handler: lf1.handler
    
  IamRoleLF1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: # Required
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaPermissions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::image-bucket-hw2-${AWS::AccountId}"
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                Resource: "*"
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource: arn:aws:es:us-east-1:894311263883:domain/hw3-opensearch-apr12
    
  LF1PermissionAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction" # Required
      FunctionName: !GetAtt LF1S3ElasticSearch.Arn # Required
      Principal: apigateway.amazonaws.com

  LF2Search:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          def handler(event, context):
            print('Hello Lambda!')
      Description: Lambda for searching photo from Elasitc Search
      Handler: lf2.handler
      Role: !GetAtt IamRoleLF2.Arn
      Runtime: python3.12
  
  IamRoleLF2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: Basic execution role for lambda
      Policies: 
        - PolicyName: 'LambdaPermissions'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - es:ESHttpGet
                  - es:ESHttpHead
                Resource: arn:aws:es:us-east-1:894311263883:domain/hw3-opensearch-apr12
              - Effect: Allow
                Action:
                  - lex:RecognizeText
                Resource: arn:aws:lex:us-east-1:894311263883:bot-alias/63JDYQBTTD/TSTALIASID

  LF2PermissionAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LF2Search.Arn
      Principal: apigateway.amazonaws.com
  
  RestAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location:
        Bucket: hw3-images
        Key: api.yaml
      BinaryMediaTypes:
        - image/jpeg
        - image/jpg
        - image/png
  
  IamRoleApiPutS3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: 
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: Allowing api gateway to put images to S3
      Policies: 
        - PolicyName: ApiGatewayPutS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !GetAtt S3BucketImages.Arn
  
  

    
Outputs:
  WebsiteURL:
   Value: !GetAtt S3BucketWeb.WebsiteURL